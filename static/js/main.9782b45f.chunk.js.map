{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","store/actions.js","store/constants.js","serviceWorker.js","store/reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","src_components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","children","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","intialStateSearch","intialStatRequest","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9782b45f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n            \r\n            <div className='tc dib br3 pa3 ma3 grow bw3 shadow-5 card'>\r\n             <img alt='robots' src={`https://robohash.org/${id}?100x100`}  />\r\n               <div>\r\n                   <h2>{name}</h2>\r\n                   <p>{email}</p>\r\n               </div>\r\n             </div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({robots}) => {\r\n/*\r\n  if (true) {\r\n    throw new Error('Fake Error to test ErrorBoundary...')\r\n  }\r\n */\r\n   return (\r\n   \t  <div>\r\n        {\r\n           robots.map((user, i) => {\r\n        return (\r\n\r\n           \t    <Card \r\n   \t            key={i} \r\n   \t            id={robots[i].id} \r\n   \t            name={robots[i].name} \r\n   \t            email={robots[i].email} \r\n   \t            />\r\n             );\r\n         })\r\n\r\n        }\r\n\t  </div>\r\n\t);\r\n }\r\n\r\n export default CardList;\r\n","import React from 'react'\r\n\r\nconst SearchBox = ({ searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t   <input\r\n\t\t   className='pa3 ba b--green bg-lightest-blue w-50 shadow-4 br3 mb4' \r\n\t\t   type='search' \r\n\t\t   placeholder='search robots'\r\n\t\t   onChange={searchChange}\r\n\t\t   />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({ hasError: true });\r\n\t}\r\n\r\n\trender() {\r\n\t\tif ( this.state.hasError ) {\r\n\t\t\treturn <h1>Oops.. Error! The Card is not loaded</h1>;\r\n\t\t}\r\n\t\t// children is anything between error boundary\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\nimport { setSearchField, requestRobots } from '../store/actions';\r\n\r\nclass App extends Component {\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n       \treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n       })\r\n\t\t\r\n\t\treturn isPending ? <div className='tc'><h3 className='f3'>Loading</h3></div> :\r\n\t\t (\r\n\t\t     <div className='tc'>\r\n\t\t        <h1 className='f1'>RoboFriends</h1>\r\n\t\t        <SearchBox searchChange={onSearchChange} />\r\n\t\t        <ErrorBoundary>\r\n\t\t        \t<CardList robots={filteredRobots} />\r\n\t\t        </ErrorBoundary>\r\n\t\t     </div>\r\n          );\r\n       \r\n\t}\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error,\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n\tCHANGE_SEARCH_FIELD, \r\n\tREQUEST_ROBOTS_PENDING, \r\n\tREQUEST_ROBOTS_SUCCESS, \r\n\tREQUEST_ROBOTS_FAILED \r\n} from './constants';\r\n\r\n\r\n// Returning a Object\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\n// HOC - Function that returns another funtion\r\n// Returning a Function\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response=> response.json())\r\n\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { \r\n\tCHANGE_SEARCH_FIELD, \r\n\tREQUEST_ROBOTS_PENDING, \r\n\tREQUEST_ROBOTS_SUCCESS, \r\n\tREQUEST_ROBOTS_FAILED \r\n} from './constants';\r\n\r\nconst intialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\n// First Reducer (Search Field)\r\nexport const searchRobots = (state = intialStateSearch, action = {}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\t// returning new state\r\n\t\t\treturn {...state, searchField: action.payload }\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst intialStatRequest = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\n// Second Reducer (Fetching the data async with redux thunk)\r\nexport const requestRobots = (state = intialStatRequest, action = {}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn { ...state, isPending: true}\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn { ...state, robots: action.payload, isPending: false}\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn { ...state, error: action.payload, isPending: false}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchRobots, requestRobots } from './store/reducers';\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(<Provider store={store} >\r\n\t\t\t\t\t<App />\r\n\t\t\t\t</Provider>, document.getElementById('root')\r\n\t\t\t);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}